{"version":3,"sources":["types/ethernetData.ts","actions/ethernetActions.ts","components/EInput.tsx","components/ECard.tsx","components/EListAddress.tsx","components/EHeader.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["API_PARAMS","EInput","className","htmlFor","type","id","placeholder","onChange","this","props","bind","React","ECard","etherscannAddress","from","to","value","confirmations","hash","href","timestamp","themeColos","EListAddress","initAddress","addressList","map","item","index","EHeader","handleAddressChange","e","receivedData","queryParams","getCallString","require","stringify","module","MODULE","action","ACTION","address","startblock","START_BLOCK","endblock","END_BLOCK","apikey","MY_API_KEY","sort","SORT_ASC","console","log","Etherscan_URL","axios","get","headers","then","response","data","catch","error","message","getEtherData","target","setState","subTitle","etherScanAddress","state","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22bc2086.chunk.js","sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst APIKEY = \"PF1CUQWNJPBUUBYZJQXWMI11PQNHY4ZFZF\";\r\n\r\nexport interface EtherData {}\r\n\r\nexport enum API_PARAMS {\r\n  Etherscan_URL = 'https://api.etherscan.io/api',\r\n  MODULE = 'account',\r\n  ACTION = \"txlist\",\r\n  SORT_ASC = \"asc\",\r\n  SORT_DEC = \"DEC\",\r\n  MY_API_KEY = 'PF1CUQWNJPBUUBYZJQXWMI11PQNHY4ZFZF',\r\n  START_BLOCK = 0,\r\n  END_BLOCK = 99999999,\r\n}\r\n\r\nexport interface etherscanHeaders {\r\n  module: string;\r\n  action: string;\r\n  address: string;\r\n  startblock: number\r\n  endblock: number\r\n  sort: string;\r\n  apikey: string;\r\n}\r\n","import axios from 'axios';\r\nimport { API_PARAMS } from '../types/ethernetData';\r\n\r\nexport const BEGIN_GET_ETHER_DATA = '@@Ordering/BEGIN_GET_ETHER_DATA';\r\nexport const SUCCESS_GET_ETHER_DATA = '@@Ordering/SUCCESS_GET_ETHER_DATA';\r\nexport const FAILURE_GET_ETHER_DATA = '@@Ordering/FAILURE_GET_ETHER_DATA';\r\nexport const RESET_STATUS_GET_ETHER_DATA =\r\n  '@@Ordering/RESET_STATUS_GET_ETHER_DATA';\r\n\r\n\r\n  export const getEtherData = (queryParams?: any): any => {\r\n      const querystring = require('querystring')\r\n\r\n      const getCallString = querystring.stringify({\r\n        module: API_PARAMS.MODULE,\r\n        action: API_PARAMS.ACTION,\r\n        address: queryParams ? queryParams.address : '',\r\n        startblock: queryParams && queryParams.startblock ? queryParams.startblock : API_PARAMS.START_BLOCK,\r\n        endblock: queryParams && queryParams.endblock ? queryParams.endblock : API_PARAMS.END_BLOCK,\r\n        apikey: API_PARAMS.MY_API_KEY,\r\n        sort: API_PARAMS.SORT_ASC,\r\n      })\r\n      console.log('My URL', `${API_PARAMS.Etherscan_URL}/${getCallString}`)\r\n\r\n      const config = {\r\n        headers: { 'Access-Control-Allow-Origin': '*' },\r\n      }\r\n\r\n      axios.get(`${API_PARAMS.Etherscan_URL}/${getCallString}`, config).then((response: any) => {\r\n          // dispatch(GetEtherDataSuccessAction(response.data))\r\n          console.log('response ', response)\r\n          return response.data\r\n      }).catch((error: any)=> {\r\n          // dispatch(error.message)\r\n          console.log('error ', error)\r\n          return error.message\r\n      })\r\n\r\n  }","import * as React from \"react\";\r\n\r\nexport interface eInputProps {\r\n  id: string;\r\n  onChange?: (event: any) => void;\r\n  useXtoClearText?: boolean;\r\n  onBlur?: (element: any) => void;\r\n  disabled?: boolean;\r\n  onInput?: (event: any) => void;\r\n}\r\n\r\nexport class EInput extends React.Component<eInputProps, any> {\r\n\r\n  render() {\r\n    return (\r\n      <span>\r\n        <div className=\"mb-3\">\r\n            <label htmlFor=\"exampleFormControlInput1\" className=\"form-label\">Enter Valid Address Only</label>\r\n            <input type=\"string\" className=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"0x00000000\" onChange={this.props.onChange?.bind(this)} />\r\n        </div>\r\n      </span>\r\n    )\r\n    \r\n  }\r\n}\r\nexport default EInput","import * as React from 'react';\r\n\r\n\r\nexport interface ECardsProps {\r\n    etherscannAddress: any\r\n} \r\nexport class ECard extends React.Component<ECardsProps, any> {\r\n    render(){\r\n        return(\r\n            <div className='card'>\r\n                <div className='card-body '>\r\n                    <h5 className='card-title'>{this.props.etherscannAddress.from ? 'from: ' + this.props.etherscannAddress.from : 'from'}</h5>\r\n                    <h6 className='card-subtitle mb-2 text-muted'>{this.props.etherscannAddress.to ? 'to: ' + this.props.etherscannAddress.to : 'to'}</h6>\r\n                    <p className='card-text'>{this.props.etherscannAddress.value ? 'value: ' + this.props.etherscannAddress.value : 'value'}</p>\r\n                    <p className='card-text'>{this.props.etherscannAddress.confirmations ? 'confirmation: ' + this.props.etherscannAddress.confirmations : 'confirmation'}</p>\r\n                    <p className='card-text'>{this.props.etherscannAddress.hash ? 'hash: ' + this.props.etherscannAddress.hash : 'hash'}</p>\r\n                    <a href='/' className='card-link'><span className=\"badge bg-light text-dark\">timestamp:</span>{this.props.etherscannAddress.timestamp}</a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ECard","import * as React from 'react';\r\nimport ECard from './ECard';\r\n\r\nexport interface EListAddressProps {\r\n    addressList: any[]\r\n}\r\n\r\nexport interface EListAddressState {\r\n\r\n}\r\n\r\nconst themeColos = [\r\n  'list-group-item list-group-item-success',\r\n  'list-group-item list-group-item-danger',\r\n  'list-group-item list-group-item-warning',\r\n  'list-group-item list-group-item-info',\r\n  'list-group-item list-group-item-light',\r\n  'list-group-item list-group-item-dark',\r\n  'list-group-item list-group-item-action'\r\n];\r\n\r\nexport class EListAddress extends React.Component<EListAddressProps, EListAddressState> {\r\n\r\n\r\n\r\n    componentWillUnmount(){\r\n\r\n    }\r\n\r\n    initAddress = () => {\r\n        const htmlAddress = this.props.addressList && this.props.addressList.map((item, index) => {\r\n            return (\r\n            <span\r\n              key={'addressList.' + index}\r\n              className={themeColos[index%7]}\r\n            >\r\n                <ECard etherscannAddress={item}/>\r\n            </span>)\r\n          })\r\n\r\n        return htmlAddress\r\n    }\r\n    render(){\r\n        return(\r\n            <div className='list-group'>\r\n                {this.initAddress()}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { getEtherData } from '../actions/ethernetActions';\r\nimport EInput from './EInput';\r\nimport { EListAddress } from './EListAddress';\r\n\r\nexport interface EheaderProps {\r\n\r\n}\r\n\r\nexport interface EheaderState {\r\n    subTitle: string\r\n    etherScanAddress: any[]\r\n}\r\n\r\nexport class EHeader extends React.Component<EheaderProps, EheaderState> {\r\n\r\n    constructor(props: EheaderProps) {\r\n        super(props)\r\n        this.state = {\r\n            subTitle: 'valid Address',\r\n            etherScanAddress: ['hello']\r\n        }\r\n    }\r\n    handleAddressChange = (e: any): void => {\r\n\r\n        let receivedData = getEtherData({ address: e.target.value, startblock: 0, endblock: 500})\r\n        this.setState({subTitle: e.target.value, etherScanAddress: receivedData})\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className='navbar navbar-expand-md navbar-dark bg-dark mb-4'>\r\n                    <div className='container-fluid'>\r\n                        <button className='navbar-toggler' type='button' data-bs-toggle='collapse' data-bs-target='#navbarCollapse' aria-controls='navbarCollapse' aria-expanded='false' aria-label='Toggle navigation'>\r\n                            <span className='navbar-toggler-icon'></span>\r\n                        </button>\r\n                        <div className='collapse navbar-collapse' id='navbarCollapse'>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n\r\n                <main className='container'>\r\n                    <div className='bg-light p-5 rounded'>\r\n                        <h1>Address To Check </h1>\r\n                        <EInput id='mainPage.mainUserIput.etherData' onChange={this.handleAddressChange}/>\r\n                        <h4>{this.state.subTitle ? 'Search: ' + this.state.subTitle : ''}</h4>\r\n                    </div>\r\n                </main>\r\n\r\n                <main className='container'>\r\n                    <div className='bg-light p-5 rounded'>\r\n                        <EListAddress addressList={this.state.etherScanAddress}/>\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default EHeader","import \"./App.css\";\nimport EHeader from './components/EHeader'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EHeader />\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}